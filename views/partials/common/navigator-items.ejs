<%
var list = [];
switch (linkedType) {
  case 'character':
    list = [
      {v: characters, h: 'Properties', m: 'Character', t: Character.getTitleFieldNames()},
      {v: settings,   h: 'Settings',   m: 'Setting',   t: Setting.getTitleFieldNames()},
      {v: events,     h: 'Events',     m: 'Event',     t: Event.getTitleFieldNames()},
      {v: locations,  h: 'Locations',  m: 'Location',  t: Location.getTitleFieldNames()},
      {v: stories,    h: 'Stories',    m: 'Story',     t: Story.getTitleFieldNames()},
    ];
  break;
  case 'event':
    list = [
      {v: events,     h: 'Properties', m: 'Event',     t: Event.getTitleFieldNames()},
      {v: characters, h: 'Characters', m: 'Character', t: Character.getTitleFieldNames()},
      {v: settings,   h: 'Settings',   m: 'Setting',   t: Setting.getTitleFieldNames()},
      {v: locations,  h: 'Locations',  m: 'Location',  t: Location.getTitleFieldNames()},
      {v: stories,    h: 'Stories',    m: 'Story',     t: Story.getTitleFieldNames()},
    ];
  break;
  case 'location':
    list = [
      {v: locations,  h: 'Properties', m: 'Location',  t: Location.getTitleFieldNames()},
      {v: characters, h: 'Characters', m: 'Character', t: Character.getTitleFieldNames()},
      {v: events,     h: 'Events',     m: 'Event',     t: Event.getTitleFieldNames()},
      {v: settings,   h: 'Settings',   m: 'Setting',   t: Setting. getTitleFieldNames()},
      {v: stories,    h: 'Stories',    m: 'Story',     t: Story.getTitleFieldNames()},
    ];
  break;
  case 'setting':
    list = [
      {v: settings,   h: 'Properties', m: 'Setting',   t: Setting.getTitleFieldNames()},
      {v: characters, h: 'Characters', m: 'Character', t: Character.getTitleFieldNames()},
      {v: events,     h: 'Events',     m: 'Event',     t: Event.getTitleFieldNames()},
      {v: locations,  h: 'Locations',  m: 'Location',  t: Location.getTitleFieldNames()},
      {v: stories,    h: 'Stories',    m: 'Story',     t: Story.getTitleFieldNames()},
    ];
  break;
  case 'story':
    list = [
      {v: stories,    h: 'Properties', m: 'Story',     t: Story.getTitleFieldNames()},
      {v: characters, h: 'Characters', m: 'Character', t: Character.getTitleFieldNames()},
      {v: events,     h: 'Events',     m: 'Event',     t: Event.getTitleFieldNames()},
      {v: settings,   h: 'Settings',   m: 'Setting',   t: Setting.getTitleFieldNames()},
      {v: locations,  h: 'Locations',  m: 'Location',  t: Location.getTitleFieldNames()}
    ];
  break;
}

function fixForJSON(val) {
  return val.replace(/'/g, '&apos;').replace(/\\/g, '\\\\');
}
function fixForDisplay(val) {
  return val.replace(/&apos;/g, "'").replace(/\\\\/g, '\\');
}
function splitCamelCase(s) {
  return s.replace(/([A-Z][a-z]|[A-Z]+(?=[A-Z]|$))/g, " $1")
  .replace(/./, m => m.toUpperCase())
  .trim();
}
%>
<script>
  function fixForDisplay(val) {
    return val.replace(/&apos;/g, "'").replace(/\\\\/g, '\\');
  }
// load navigator Title-editor click handlers
let settings = JSON.parse(`<%- fixForJSON(JSON.stringify(settings)) %>`);
let events = JSON.parse(`<%- fixForJSON(JSON.stringify(events)) %>`);
let locations = JSON.parse(`<%- fixForJSON(JSON.stringify(locations)) %>`);
let stories = JSON.parse(`<%- fixForJSON(JSON.stringify(stories)) %>`);
let characters = JSON.parse(`<%- fixForJSON(JSON.stringify(characters)) %>`);
var linkedType = `<%- linkedType %>`;

function setupClickHandlers() {
  var list = JSON.parse(`<%- fixForJSON(JSON.stringify(list)) %>`);
  list.map((s) => {
    s.v.map((c) => {
      let domID = `${s.m}_${c.id}_`;
      s.t.map((t) => {
        if (s.m !== uppercaseFirst(linkedType)
          || Number(c.id) !== Number(linkedID)

          || t !== s.t[0]

        ) {
          $(`#${domID}_${t}`).click( (event,ui) => {
            let content = (c[t]) ? fixForDisplay(c[t].content) : '';
            navigatorTitleClick_handler(event,ui,domID,t,content,c,linkedType);
          });
        } else {
          $(`#${domID}_${t}`).addClass('prop-main-title');
        }
      });
    });
  });
}
function unlinkRecords(event, subjectType, subjectID, objectType, objectID) {
  $.ajax({url: '/unlink', method: 'POST',
    data: {
      subjectType: subjectType,
      subjectID: subjectID,
      objectType: objectType,
      objectID: objectID}
  }).done(unlinkRecords_handleResponse);
  event.stopPropagation();
}
function unlinkRecords_handleResponse(data) {
  reloadNavigator(linkedType, linkedID);
}
</script>
<%
list.map((s) => { if (s.v.length) { %>
    <div class='Navigator_header'><%= s.h %></div>
    <div id='Nav<%= s.m %>Container' class='Navigator_container'>
      <% var altColor = false;
      var colorStyle = '';
      s.v.map((c) => { %>
        <div class='item_accordion'>
          <%
          altColor = !altColor;
          colorStyle = (altColor) ? 'alt-list-color' : '';
          let domID = `${s.m}_${c.id}_`;

          // don't do header for own properties
          if (linkedID !== c.id || s.m !== ucfirstType) { %>

            <h3>
              <span id="<%= domID %>_header" class="nav-item-header-text">
                <%= fixForDisplay(c[s.t[0]].content) %>
              </span>
              <a href="#" class="btn"
                title="Unlink" alt="Unlink"
                onclick="unlinkRecords(event, uppercaseFirst(linkedType), linkedID, '<%= s.m %>', <%= c.id %>);">X</a>
              <a href="#" class="btn"
                title="Workspace" alt="Workspace"
                onclick="gotoRecord(event, `<%= s.m %>`,<%= c.id %>,`${linkedType}/${linkedID}`)">&gt;&gt;</a>
            </h3>
          <% } %>
          <div class='Navigator_item <%= colorStyle %>'>
            <% // don't show main title in own properties
            if (linkedID !== c.id
              || s.m !== ucfirstType
            ) { %>
              <div class='Navigator_TopTitle' id="<%= domID %>_<%= s.t[0] %>">
                <%= splitCamelCase(s.t[0]) %>:
                <div><%= fixForDisplay(c[s.t[0]].content) %></div>

                <script>
                // while we're here
                autocompleteContent[autocompleteContent.length]
                  = `<%- (c[s.t[0]]) ? fixForDisplay(c[s.t[0]].content) : '' %>`;
                </script>

              </div>
            <% } %>
            <% for (let x = 1; x < s.t.length; x++) { %>
              <div class='Navigator_Title' id="<%= domID %>_<%= s.t[x] %>">
                <%= splitCamelCase(s.t[x]) %>:
                <div><%= (c[s.t[x]]) ? fixForDisplay(c[s.t[x]].content) : '' %></div>

                <script>
                // while we're here
                autocompleteContent[autocompleteContent.length]
                  = `<%- (c[s.t[x]]) ? fixForDisplay(c[s.t[x]].content) : '' %>`;
                </script>

              </div>
            <% } %>
          </div>
        </div>
      <% }); %>
    </div>
<% } }); %>
